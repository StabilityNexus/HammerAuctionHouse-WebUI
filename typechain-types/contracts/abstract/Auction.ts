/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AuctionInterface extends Interface {
  getFunction(
    nameOrSignature: "auctionCounter" | "onERC721Received"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "bidPlaced" | "fundsWithdrawn" | "itemWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
}

export namespace bidPlacedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    bidder: AddressLike,
    bidAmount: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    bidder: string,
    bidAmount: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    bidder: string;
    bidAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace fundsWithdrawnEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    amountWithdrawn: BigNumberish
  ];
  export type OutputTuple = [auctionId: bigint, amountWithdrawn: bigint];
  export interface OutputObject {
    auctionId: bigint;
    amountWithdrawn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace itemWithdrawnEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    withdrawer: AddressLike,
    auctionedTokenAddress: AddressLike,
    auctionedTokenIdOrAmount: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    withdrawer: string,
    auctionedTokenAddress: string,
    auctionedTokenIdOrAmount: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    withdrawer: string;
    auctionedTokenAddress: string;
    auctionedTokenIdOrAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Auction extends BaseContract {
  connect(runner?: ContractRunner | null): Auction;
  waitForDeployment(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionCounter: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "bidPlaced"
  ): TypedContractEvent<
    bidPlacedEvent.InputTuple,
    bidPlacedEvent.OutputTuple,
    bidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "fundsWithdrawn"
  ): TypedContractEvent<
    fundsWithdrawnEvent.InputTuple,
    fundsWithdrawnEvent.OutputTuple,
    fundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "itemWithdrawn"
  ): TypedContractEvent<
    itemWithdrawnEvent.InputTuple,
    itemWithdrawnEvent.OutputTuple,
    itemWithdrawnEvent.OutputObject
  >;

  filters: {
    "bidPlaced(uint256,address,uint256)": TypedContractEvent<
      bidPlacedEvent.InputTuple,
      bidPlacedEvent.OutputTuple,
      bidPlacedEvent.OutputObject
    >;
    bidPlaced: TypedContractEvent<
      bidPlacedEvent.InputTuple,
      bidPlacedEvent.OutputTuple,
      bidPlacedEvent.OutputObject
    >;

    "fundsWithdrawn(uint256,uint256)": TypedContractEvent<
      fundsWithdrawnEvent.InputTuple,
      fundsWithdrawnEvent.OutputTuple,
      fundsWithdrawnEvent.OutputObject
    >;
    fundsWithdrawn: TypedContractEvent<
      fundsWithdrawnEvent.InputTuple,
      fundsWithdrawnEvent.OutputTuple,
      fundsWithdrawnEvent.OutputObject
    >;

    "itemWithdrawn(uint256,address,address,uint256)": TypedContractEvent<
      itemWithdrawnEvent.InputTuple,
      itemWithdrawnEvent.OutputTuple,
      itemWithdrawnEvent.OutputObject
    >;
    itemWithdrawn: TypedContractEvent<
      itemWithdrawnEvent.InputTuple,
      itemWithdrawnEvent.OutputTuple,
      itemWithdrawnEvent.OutputObject
    >;
  };
}
