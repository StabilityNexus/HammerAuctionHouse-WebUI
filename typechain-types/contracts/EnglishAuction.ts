/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EnglishAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionCounter"
      | "auctions"
      | "bids"
      | "createAuction"
      | "onERC721Received"
      | "placeBid"
      | "withdrawFunds"
      | "withdrawItem"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionCreated"
      | "bidPlaced"
      | "fundsWithdrawn"
      | "itemWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      string,
      string,
      string,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawItem",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItem",
    data: BytesLike
  ): Result;
}

export namespace AuctionCreatedEvent {
  export type InputTuple = [
    Id: BigNumberish,
    name: string,
    description: string,
    imgUrl: string,
    auctioneer: AddressLike,
    auctionType: BigNumberish,
    auctionedToken: AddressLike,
    auctionedTokenIdOrAmount: BigNumberish,
    biddingToken: AddressLike,
    startingBid: BigNumberish,
    minBidDelta: BigNumberish,
    deadline: BigNumberish,
    deadlineExtension: BigNumberish
  ];
  export type OutputTuple = [
    Id: bigint,
    name: string,
    description: string,
    imgUrl: string,
    auctioneer: string,
    auctionType: bigint,
    auctionedToken: string,
    auctionedTokenIdOrAmount: bigint,
    biddingToken: string,
    startingBid: bigint,
    minBidDelta: bigint,
    deadline: bigint,
    deadlineExtension: bigint
  ];
  export interface OutputObject {
    Id: bigint;
    name: string;
    description: string;
    imgUrl: string;
    auctioneer: string;
    auctionType: bigint;
    auctionedToken: string;
    auctionedTokenIdOrAmount: bigint;
    biddingToken: string;
    startingBid: bigint;
    minBidDelta: bigint;
    deadline: bigint;
    deadlineExtension: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace bidPlacedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    bidder: AddressLike,
    bidAmount: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    bidder: string,
    bidAmount: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    bidder: string;
    bidAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace fundsWithdrawnEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    amountWithdrawn: BigNumberish
  ];
  export type OutputTuple = [auctionId: bigint, amountWithdrawn: bigint];
  export interface OutputObject {
    auctionId: bigint;
    amountWithdrawn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace itemWithdrawnEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    withdrawer: AddressLike,
    auctionedTokenAddress: AddressLike,
    auctionedTokenIdOrAmount: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    withdrawer: string,
    auctionedTokenAddress: string,
    auctionedTokenIdOrAmount: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    withdrawer: string;
    auctionedTokenAddress: string;
    auctionedTokenIdOrAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnglishAuction extends BaseContract {
  connect(runner?: ContractRunner | null): EnglishAuction;
  waitForDeployment(): Promise<this>;

  interface: EnglishAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionCounter: TypedContractMethod<[], [bigint], "view">;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        name: string;
        description: string;
        imgUrl: string;
        auctioneer: string;
        auctionType: bigint;
        auctionedToken: string;
        auctionedTokenIdOrAmount: bigint;
        biddingToken: string;
        startingBid: bigint;
        availableFunds: bigint;
        minBidDelta: bigint;
        highestBid: bigint;
        winner: string;
        deadline: bigint;
        deadlineExtension: bigint;
        isClaimed: boolean;
      }
    ],
    "view"
  >;

  bids: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  createAuction: TypedContractMethod<
    [
      name: string,
      description: string,
      imgUrl: string,
      auctionType: BigNumberish,
      auctionedToken: AddressLike,
      auctionedTokenIdOrAmount: BigNumberish,
      biddingToken: AddressLike,
      startingBid: BigNumberish,
      minBidDelta: BigNumberish,
      duration: BigNumberish,
      deadlineExtension: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  placeBid: TypedContractMethod<
    [auctionId: BigNumberish, bidAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawItem: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        name: string;
        description: string;
        imgUrl: string;
        auctioneer: string;
        auctionType: bigint;
        auctionedToken: string;
        auctionedTokenIdOrAmount: bigint;
        biddingToken: string;
        startingBid: bigint;
        availableFunds: bigint;
        minBidDelta: bigint;
        highestBid: bigint;
        winner: string;
        deadline: bigint;
        deadlineExtension: bigint;
        isClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      imgUrl: string,
      auctionType: BigNumberish,
      auctionedToken: AddressLike,
      auctionedTokenIdOrAmount: BigNumberish,
      biddingToken: AddressLike,
      startingBid: BigNumberish,
      minBidDelta: BigNumberish,
      duration: BigNumberish,
      deadlineExtension: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [auctionId: BigNumberish, bidAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawItem"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AuctionCreated"
  ): TypedContractEvent<
    AuctionCreatedEvent.InputTuple,
    AuctionCreatedEvent.OutputTuple,
    AuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "bidPlaced"
  ): TypedContractEvent<
    bidPlacedEvent.InputTuple,
    bidPlacedEvent.OutputTuple,
    bidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "fundsWithdrawn"
  ): TypedContractEvent<
    fundsWithdrawnEvent.InputTuple,
    fundsWithdrawnEvent.OutputTuple,
    fundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "itemWithdrawn"
  ): TypedContractEvent<
    itemWithdrawnEvent.InputTuple,
    itemWithdrawnEvent.OutputTuple,
    itemWithdrawnEvent.OutputObject
  >;

  filters: {
    "AuctionCreated(uint256,string,string,string,address,uint8,address,uint256,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;
    AuctionCreated: TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;

    "bidPlaced(uint256,address,uint256)": TypedContractEvent<
      bidPlacedEvent.InputTuple,
      bidPlacedEvent.OutputTuple,
      bidPlacedEvent.OutputObject
    >;
    bidPlaced: TypedContractEvent<
      bidPlacedEvent.InputTuple,
      bidPlacedEvent.OutputTuple,
      bidPlacedEvent.OutputObject
    >;

    "fundsWithdrawn(uint256,uint256)": TypedContractEvent<
      fundsWithdrawnEvent.InputTuple,
      fundsWithdrawnEvent.OutputTuple,
      fundsWithdrawnEvent.OutputObject
    >;
    fundsWithdrawn: TypedContractEvent<
      fundsWithdrawnEvent.InputTuple,
      fundsWithdrawnEvent.OutputTuple,
      fundsWithdrawnEvent.OutputObject
    >;

    "itemWithdrawn(uint256,address,address,uint256)": TypedContractEvent<
      itemWithdrawnEvent.InputTuple,
      itemWithdrawnEvent.OutputTuple,
      itemWithdrawnEvent.OutputObject
    >;
    itemWithdrawn: TypedContractEvent<
      itemWithdrawnEvent.InputTuple,
      itemWithdrawnEvent.OutputTuple,
      itemWithdrawnEvent.OutputObject
    >;
  };
}
